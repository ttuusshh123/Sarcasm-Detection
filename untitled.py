# -*- coding: utf-8 -*-
"""Untitled.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TOQVZKHNJ9Y6V2sORcSO9W5HHkNDFAgo
"""

import json

# ls

# cd drive

# cd My\ Drive

# cd sarcasm detection



# from google.colab import drive
# drive.mount('/content/drive')

import json

data = []
for line in open('Sarcasm_Headlines_Dataset.json', 'r'):
    data.append(json.loads(line))

sent=[]
links=[]
labels=[]
for i in data:
    sent.append(i['headline'])
    links.append(i['article_link'])
    labels.append(i['is_sarcastic'])

import tensorflow as tf

print(tf.__version__)

from tensorflow.keras.preprocessing.text import Tokenizer

from tensorflow.keras.preprocessing.sequence import pad_sequences

token = Tokenizer(oov_token="<oov>")

token.fit_on_texts(sent)

word_index = token.word_index

seq = token.texts_to_sequences(sent)

padded = pad_sequences(seq,padding="post")

# padded.shape

# len(padded)

# len(labels)

# len(links)

# type(labels)

import numpy as np

labels = np.array(labels)

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(padded,labels,test_size=0.1)

vocab_size=100000
embedding_dim = 16
max_length=120

model = tf.keras.Sequential([
    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=40),
    tf.keras.layers.GlobalAveragePooling1D(),
    tf.keras.layers.Dense(6, activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(1, activation='sigmoid')
])
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
model.summary()

r = model.fit(X_train,y_train,epochs=10,validation_data = (X_test,y_test))

import matplotlib.pyplot as plt

plt.plot(r.history['accuracy'],color='r')
plt.plot(r.history['val_accuracy'],color='b')
plt.show()

# X_test[0]

# y_test[0]

model.predict(X_test[0].reshape(1,X_test.shape[1]))

y_pred = model.predict(X_test)

y_pred = np.array([0 if i<0.5 else 1 for i in y_pred ])

from sklearn.metrics import accuracy_score
print(accuracy_score(y_pred,y_test))

import pickle  
file_pi = open('filename_pi.obj', 'wb') 
pickle.dump(token, file_pi)

